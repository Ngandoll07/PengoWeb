// ‚úÖ File: routes/recommend.js
import express from "express";
import jwt from "jsonwebtoken";
import fetch from "node-fetch";
import StudyPlan from "../models/StudyPlan.js";
import RoadmapItem from "../models/RoadmapItem.js";

const router = express.Router();
const JWT_SECRET = "123";

// POST: Ph√¢n t√≠ch t·ª´ AI ‚ûù sinh roadmap ng√†y 1 duy nh·∫•t
router.post("/recommend", async (req, res) => {
  const { listeningScore, readingScore, targetScore, studyDuration } = req.body;
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

const prompt = `
T√¥i l√† m·ªôt h·ªçc vi√™n ƒëang luy·ªán thi TOEIC.

üß™ K·∫øt qu·∫£ ƒë·∫ßu v√†o c·ªßa t√¥i:
- Listening: ${listeningScore}/450
- Reading: ${readingScore}/450

üéØ M·ª•c ti√™u c·ªßa t√¥i l√† ƒë·∫°t kho·∫£ng ${targetScore} ƒëi·ªÉm TOEIC.
‚è∞ T√¥i c√≥ kho·∫£ng ${studyDuration} tu·∫ßn ƒë·ªÉ luy·ªán thi.

üéì H√£y gi√∫p t√¥i:

1. Ph√¢n t√≠ch **chi ti·∫øt** ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu.
2. Ch·ªâ t·∫°o **1 ng√†y ƒë·∫ßu ti√™n** (day 1) v·ªõi 1 k·ªπ nƒÉng duy nh·∫•t (listening ho·∫∑c reading), t·∫≠p trung v√†o Part ph√π h·ª£p nh·∫•t.
3. G·ª£i √Ω **level**: easy / medium / hard.

‚ö†Ô∏è Tr·∫£ v·ªÅ **ch·ªâ JSON**, ƒë√∫ng ƒë·ªãnh d·∫°ng:

{
  "analysis": "Ph√¢n t√≠ch chi ti·∫øt ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu, n√™u v√≠ d·ª• c·ª• th·ªÉ",
  "plan": [
    {
      "day": 1,
      "title": "T√™n b√†i h·ªçc g·ª£i √Ω cho ng√†y 1",
      "skill": "listening ho·∫∑c reading",
      "part": S·ªë Part ph√π h·ª£p (1-7),
      "level": "easy ho·∫∑c medium ho·∫∑c hard",
      "status": "pending",
      "progress": 0
    }
  ]
}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m gi·∫£i th√≠ch hay text n√†o kh√°c.
`;

  try {
    const aiRes = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    const data = await aiRes.json();
    const content = data.choices?.[0]?.message?.content || "";

    const parsed = JSON.parse(content);
    const { analysis, plan } = parsed;

    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    // X√≥a roadmap c≈©
    await RoadmapItem.deleteMany({ userId });

    // L∆∞u StudyPlan
    await new StudyPlan({
      userId,
      listeningScore,
      readingScore,
      suggestion: plan,
      analysis: JSON.stringify(analysis),  // üîπ stringify tr∆∞·ªõc khi l∆∞u
    }).save();

    // T·∫°o RoadmapItem
    const roadmapItems = plan.map(item => ({ ...item, userId }));
    const saved = await RoadmapItem.insertMany(roadmapItems);

    res.json({ suggestion: saved, analysis });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o l·ªô tr√¨nh." });
  }
});

// GET: L·∫•y roadmap + c·∫≠p nh·∫≠t ti·∫øn tr√¨nh n·∫øu c√≥
router.get("/recommend", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    const roadmapItems = await RoadmapItem.find({ userId }).sort({ day: 1 });
    const results = await import("../models/UserLessonResult.js").then(m => m.default.find({ userId }));

    const scoreMap = {};
    results.forEach(result => {
      if (result.roadmapItemId) scoreMap[result.roadmapItemId.toString()] = result.score;
    });

    const updatedItems = await Promise.all(
      roadmapItems.map(async item => {
        const score = scoreMap[item._id.toString()];
        if (score !== undefined) {
          const newStatus = score >= 50 ? "done" : "pending";
          const newProgress = score;
          if (item.status !== newStatus || item.progress !== newProgress) {
            item.status = newStatus;
            item.progress = newProgress;
            await item.save();
          }
        }
        return item;
      })
    );

    const plan = await StudyPlan.findOne({ userId }).sort({ createdAt: -1 });

    res.json({
      suggestion: updatedItems,
      analysis: plan?.analysis || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y l·ªô tr√¨nh." });
  }
});

export default router;
