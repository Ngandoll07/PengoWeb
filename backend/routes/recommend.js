import express from "express";
import jwt from "jsonwebtoken";
import StudyPlan from "../models/StudyPlan.js";
import fetch from "node-fetch";

const router = express.Router();
const JWT_SECRET = "123";

// POST: T·∫°o l·ªô tr√¨nh h·ªçc m·ªõi t·ª´ AI Groq
router.post("/recommend", async (req, res) => {
  const { listeningScore, readingScore, targetScore, studyDuration } = req.body;
  const token = req.headers.authorization?.split(" ")[1];

  const prompt = `
T√¥i l√† h·ªçc vi√™n ƒëang luy·ªán thi TOEIC.
K·∫øt qu·∫£ ƒë·∫ßu v√†o:
- Listening: ${listeningScore}/50
- Reading: ${readingScore}/50

üéØ M·ª•c ti√™u c·ªßa t√¥i l√† ƒë·∫°t kho·∫£ng ${targetScore} ƒëi·ªÉm TOEIC.
‚è∞ T√¥i c√≥ kho·∫£ng ${studyDuration} ƒë·ªÉ luy·ªán thi.

H√£y:
1. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu c·ªßa t√¥i, ƒê·ªÅ xu·∫•t m·ªôt l·ªô tr√¨nh h·ªçc ph√π h·ª£p v·ªõi m·ª•c ti√™u v√† th·ªùi gian h·ªçc v√† Chia r√µ theo t·ª´ng ng√†y v√† t·ª´ng k·ªπ nƒÉng n·∫øu c√≥ th·ªÉ.
2. Ch·ªâ ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch cho **ng√†y 1**, m·ªôt k·ªπ nƒÉng duy nh·∫•t (nghe, ƒë·ªçc, t·ª´ v·ª±ng ho·∫∑c ng·ªØ ph√°p).
3. Tr·∫£ v·ªÅ JSON theo ƒë·ªãnh d·∫°ng:

[
  {
    "day": 1,
    "title": "Luy·ªán ƒë·ªçc Part 1",
    "skill": "listening",
    "status": "pending",
    "progress": 0
  }
]

Ch·ªâ tr·∫£ v·ªÅ ph·∫ßn ph√¢n t√≠ch v√† JSON, kh√¥ng th√™m m√¥ t·∫£ ngo√†i.
`;

  let roadmapJson = [];
  let planText = "";

  try {
    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content || "";

    // Ph√¢n t√°ch ph·∫ßn JSON v√† ph√¢n t√≠ch
    const first = content.indexOf("[");
    const last = content.lastIndexOf("]");
    const jsonText = content.substring(first, last + 1);
    planText = content.substring(0, first).trim();

    try {
      roadmapJson = JSON.parse(jsonText);
    } catch (err) {
      console.error("‚ùå L·ªói khi parse JSON:", err);
      return res.status(500).json({ error: "L·ªói parse JSON t·ª´ Groq." });
    }

    // L∆∞u v√†o DB n·∫øu c√≥ token
    if (token) {
      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const plan = new StudyPlan({
          userId: decoded.userId,
          listeningScore,
          readingScore,
          suggestion: JSON.stringify(roadmapJson),
          analysis: planText,
        });
        await plan.save();
      } catch (err) {
        console.warn("‚ö†Ô∏è Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n:", err.message);
      }
    }

    // G·ª≠i v·ªÅ client
    res.json({
      suggestion: roadmapJson,
      analysis: planText,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ªçi Groq:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc t·ª´ Groq." });
  }
});

// GET: L·∫•y l·ªô tr√¨nh h·ªçc m·ªõi nh·∫•t t·ª´ DB
router.get("/recommend", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Thi·∫øu token!" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const plans = await StudyPlan.find({ userId: decoded.userId })
      .sort({ createdAt: -1 })
      .limit(1);

    if (!plans.length) {
      return res.status(404).json({ message: "Ch∆∞a c√≥ l·ªô tr√¨nh!" });
    }

    const plan = plans[0];
    res.json({
      suggestion: JSON.parse(plan.suggestion),
      analysis: plan.analysis || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªô tr√¨nh:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y l·ªô tr√¨nh." });
  }
});

export default router;