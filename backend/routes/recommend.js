// ‚úÖ File: routes/recommend.js
import express from "express";
import jwt from "jsonwebtoken";
import fetch from "node-fetch";
import StudyPlan from "../models/StudyPlan.js";
import RoadmapItem from "../models/RoadmapItem.js";

const router = express.Router();
const JWT_SECRET = "123";

// ‚úÖ POST: Ph√¢n t√≠ch t·ª´ AI ‚ûù sinh roadmap ng√†y 1
router.post("/recommend", async (req, res) => {
  const { listeningScore, readingScore, targetScore, studyDuration } = req.body;
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

const prompt = `
T√¥i l√† m·ªôt h·ªçc vi√™n ƒëang luy·ªán thi TOEIC.

üß™ K·∫øt qu·∫£ ƒë·∫ßu v√†o c·ªßa t√¥i:
- Listening: ${listeningScore}/50
- Reading: ${readingScore}/50

üéØ M·ª•c ti√™u c·ªßa t√¥i l√† ƒë·∫°t kho·∫£ng ${targetScore} ƒëi·ªÉm TOEIC.
‚è∞ T√¥i c√≥ kho·∫£ng ${studyDuration} ƒë·ªÉ luy·ªán thi.

üéì H√£y gi√∫p t√¥i:
1. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu c·ªßa t√¥i
2. **ƒê·ªÅ xu·∫•t k·∫ø ho·∫°ch √¥n luy·ªán cho ng√†y 1** v·ªõi 1 k·ªπ nƒÉng duy nh·∫•t (listening ho·∫∑c reading), t·∫≠p trung v√†o ph·∫ßn (Part) ph√π h·ª£p nh·∫•t v·ªõi nƒÉng l·ª±c hi·ªán t·∫°i.
3. G·ª£i √Ω **m·ª©c ƒë·ªô ph√π h·ª£p** (level: easy / medium / hard) ƒë·ªÉ b·∫Øt ƒë·∫ßu √¥n luy·ªán ng√†y ƒë·∫ßu sao cho hi·ªáu qu·∫£ nh·∫•t.

üìã Tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng sau:

{
  "analysis": "Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu**",
  "plan": [
    {
      "day": 1,
      "title": "T√™n b√†i h·ªçc g·ª£i √Ω cho ng√†y 1",
      "skill": "listening ho·∫∑c reading",
      "part": S·ªë, // part ph√π h·ª£p nh∆∞ 1, 2, 5, v.v.
      "level": "easy ho·∫∑c medium ho·∫∑c hard",
      "status": "pending",
      "progress": 0
    }
  ]
}

‚ö†Ô∏è Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON tr√™n. Kh√¥ng vi·∫øt b·∫•t k·ª≥ l·ªùi gi·∫£i th√≠ch n√†o b√™n ngo√†i JSON.
`;


  try {
    const aiRes = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    const data = await aiRes.json();
    const content = data.choices?.[0]?.message?.content || "";

    const parsed = JSON.parse(content);
    const { analysis, plan } = parsed;

    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    // Xo√° roadmap c≈© n·∫øu c√≥
    await RoadmapItem.deleteMany({ userId });

    // L∆∞u StudyPlan
    await new StudyPlan({
      userId,
      listeningScore,
      readingScore,
      suggestion: plan,
      analysis
    }).save();

    // T·∫°o RoadmapItem
    const roadmapItems = plan.map(item => ({ ...item, userId }));
    const saved = await RoadmapItem.insertMany(roadmapItems);

    res.json({ suggestion: saved, analysis });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o l·ªô tr√¨nh." });
  }
});

// ‚úÖ GET: L·∫•y roadmap
// ‚úÖ GET: L·∫•y roadmap k√®m c·∫≠p nh·∫≠t ti·∫øn tr√¨nh n·∫øu c√≥ k·∫øt qu·∫£
router.get("/recommend", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    // üîç T√¨m roadmap c·ªßa user
    const roadmapItems = await RoadmapItem.find({ userId }).sort({ day: 1 });

    // üîç T√¨m k·∫øt qu·∫£ l√†m b√†i
    const results = await import("../models/UserLessonResult.js").then(m => m.default.find({ userId }));

    // üß† T·∫°o map t·ª´ roadmapItemId -> score
    const scoreMap = {};
    results.forEach(result => {
      if (result.roadmapItemId) {
        scoreMap[result.roadmapItemId.toString()] = result.score;
      }
    });

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i d·ª±a v√†o score
    const updatedItems = await Promise.all(
      roadmapItems.map(async (item) => {
        const score = scoreMap[item._id.toString()];
        if (score !== undefined) {
          const newStatus = score >= 50 ? "done" : "pending";
          const newProgress = score;

          // Ch·ªâ update n·∫øu kh√°c
          if (item.status !== newStatus || item.progress !== newProgress) {
            item.status = newStatus;
            item.progress = newProgress;
            await item.save();
          }
        }
        return item;
      })
    );

    const plan = await StudyPlan.findOne({ userId }).sort({ createdAt: -1 });

    res.json({
      suggestion: updatedItems,
      analysis: plan?.analysis || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y l·ªô tr√¨nh." });
  }
});


export default router;
