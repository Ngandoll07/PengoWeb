// routes/recommend.js
import express from "express";
import jwt from "jsonwebtoken";
import fetch from "node-fetch";
import StudyPlan from "../models/StudyPlan.js";
import RoadmapItem from "../models/RoadmapItem.js";

const router = express.Router();
const JWT_SECRET = "123";

// POST: G·ªçi AI t·∫°o l·ªô tr√¨nh v√† l∆∞u v√†o DB
router.post("/recommend", async (req, res) => {
  const { listeningScore, readingScore, targetScore, studyDuration } = req.body;
  const token = req.headers.authorization?.split(" ")[1];

  const prompt = `
T√¥i l√† h·ªçc vi√™n ƒëang luy·ªán thi TOEIC.
K·∫øt qu·∫£ ƒë·∫ßu v√†o:
- Listening: ${listeningScore}/50
- Reading: ${readingScore}/50
üéØ M·ª•c ti√™u: ${targetScore} ƒëi·ªÉm TOEIC.
‚è∞ Th·ªùi gian √¥n: ${studyDuration}.
1. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh/y·∫øu v√† ƒë·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc ph√π h·ª£p t·ª´ng ng√†y.
2. Ch·ªâ ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch cho **ng√†y 1**, m·ªôt k·ªπ nƒÉng duy nh·∫•t.
3. Tr·∫£ v·ªÅ JSON nh∆∞ sau:
[
  {
    "day": 1,
    "title": "Luy·ªán nghe Part 1",
    "skill": "listening",
    "status": "pending",
    "progress": 0
  }
]
Ch·ªâ tr·∫£ v·ªÅ ph√¢n t√≠ch v√† JSON.`;

  try {
    const aiRes = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    const data = await aiRes.json();
    const content = data.choices?.[0]?.message?.content || "";

    const first = content.indexOf("[");
    const last = content.lastIndexOf("]");
    const jsonText = content.substring(first, last + 1);
    const analysisText = content.substring(0, first).trim();

    let roadmapJson;
    try {
      roadmapJson = JSON.parse(jsonText);
    } catch (err) {
      console.error("‚ùå L·ªói khi parse JSON t·ª´ AI:", err);
      return res.status(500).json({ error: "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c JSON t·ª´ AI." });
    }

    if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    // Xo√° roadmap c≈© n·∫øu c√≥
    await RoadmapItem.deleteMany({ userId });

    // L∆∞u StudyPlan
    await new StudyPlan({
      userId,
      listeningScore,
      readingScore,
      suggestion: JSON.stringify(roadmapJson),
      analysis: analysisText,
    }).save();

    // T·∫°o m·ªõi RoadmapItem
    const itemsToInsert = roadmapJson.map((item) => ({
      ...item,
      userId,
      progress: item.progress || 0,
      status: item.status || "pending",
    }));

    const savedItems = await RoadmapItem.insertMany(itemsToInsert);

    res.json({
      suggestion: savedItems, // c√≥ _id ƒë·∫ßy ƒë·ªß
      analysis: analysisText,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc." });
  }
});

// GET: L·∫•y l·ªô tr√¨nh t·ª´ DB
router.get("/recommend", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Thi·∫øu token!" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    const items = await RoadmapItem.find({ userId }).sort({ day: 1 });
    const plan = await StudyPlan.findOne({ userId }).sort({ createdAt: -1 });

    if (!items.length && !plan) return res.status(404).json({ message: "Ch∆∞a c√≥ l·ªô tr√¨nh!" });

    res.json({
      suggestion: items,
      analysis: plan?.analysis || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªô tr√¨nh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y l·ªô tr√¨nh." });
  }
});

export default router;
