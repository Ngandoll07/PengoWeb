import express from "express";
import dotenv from "dotenv";
import axios from "axios";

dotenv.config();
const router = express.Router();
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// H·ªá th·ªëng message r√∫t g·ªçn, r√µ r√†ng, ch·ªâ y√™u c·∫ßu tr·∫£ v·ªÅ m·∫£ng per-question
const systemMessageBatch = `
B·∫°n l√† tr·ª£ l√Ω AI TOEIC ph·∫ßn ƒê·ªçc hi·ªÉu (Part 5/6/7).
Nhi·ªám v·ª•: Ph√¢n t√≠ch t·ª´ng c√¢u v√† tr·∫£ v·ªÅ ƒë·ªô kh√≥ c·ªßa m·ªói c√¢u theo quy t·∫Øc:
- easy: ‚â•80% t·ª´ v·ª±ng thu·ªôc Oxford 3000 ho·∫∑c tr√¨nh ƒë·ªô CEFR A1‚ÄìA2
- medium: 60%‚Äì79%
- hard: <60%

Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng JSON duy nh·∫•t d·∫°ng m·∫£ng, kh√¥ng l·ªùi gi·∫£i th√≠ch. M·ªói ph·∫ßn t·ª≠:
{
  "questionIndex": "<v√≠ d·ª•: '1' ho·∫∑c '2.3'>",
  "level": "easy" | "medium" | "hard"
}
`;

router.post("/analyze-difficulty", async (req, res) => {
  const { part, questions = [], blocks = [] } = req.body;

  // Chu·∫©n b·ªã danh s√°ch c√¢u ƒë·ªÉ g·ª≠i AI
  const listCau = [];
  if (part === 5 || part === 7) {
    questions.forEach((q, i) => {
      listCau.push({
        index: `${i + 1}`,
        question: q.question,
        options: q.options,
      });
    });
  }
  if (part === 6 || part === 7) {
    blocks.forEach((block, bi) => {
      block.questions.forEach((q, qi) => {
        listCau.push({
          index: `${bi + 1}.${qi + 1}`,
          passage: block.passage,
          question: q.question,
          options: q.options,
        });
      });
    });
  }

  if (listCau.length === 0) {
    return res.status(400).json({ message: "Kh√¥ng c√≥ c√¢u ƒë·ªÉ ph√¢n t√≠ch" });
  }

  // X√¢y prompt chi ti·∫øt
  let prompt = "D∆∞·ªõi ƒë√¢y l√† c√°c c√¢u c·∫ßn ƒë√°nh gi√° ƒë·ªô kh√≥:\n\n";
  listCau.forEach(item => {
    prompt += `C√¢u ${item.index}:\n`;
    if (item.passage) prompt += `ƒêo·∫°n: ${item.passage}\n`;
    prompt += `${item.question}\nA. ${item.options.A}\nB. ${item.options.B}\nC. ${item.options.C}\nD. ${item.options.D}\n\n`;
  });

  try {
    console.log("üìù Prompt g·ª≠i AI (per-question):", prompt);
    const response = await axios.post(
      "https://api.groq.com/openai/v1/chat/completions",
      {
        model: "llama3-8b-8192",
        messages: [
          { role: "system", content: systemMessageBatch },
          { role: "user", content: prompt },
        ],
        temperature: 0.4,
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    console.log("üì¨ Raw response.data t·ª´ AI:", response.data);

    let aiText = response.data.choices?.[0]?.message?.content?.trim() || "";

    if (!aiText) {
      console.warn("‚ö†Ô∏è AI kh√¥ng tr·∫£ n·ªôi dung, fallback to√†n b·ªô c√¢u medium");
      const fallback = listCau.map(c => ({ questionIndex: c.index, level: "medium" }));
      return res.json({ perQuestion: fallback });
    }

    if (!aiText.startsWith("[")) {
      const first = aiText.indexOf("[");
      const last = aiText.lastIndexOf("]");
      if (first !== -1 && last !== -1) {
        aiText = aiText.slice(first, last + 1);
      }
    }

    let resultArray;
    try {
      resultArray = JSON.parse(aiText);
    } catch (parseErr) {
      console.warn("‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ AI, fallback medium:", parseErr.message);
      resultArray = listCau.map(c => ({ questionIndex: c.index, level: "medium" }));
    }

    return res.json({ perQuestion: resultArray });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë√°nh gi√° ƒë·ªô kh√≥:", err.response?.data || err.message);
    // fallback medium cho t·∫•t c·∫£
    const fallback = [];
    if (part === 5 || part === 7) {
      questions.forEach((q, i) => fallback.push({ questionIndex: `${i + 1}`, level: "medium" }));
    }
    if (part === 6 || part === 7) {
      blocks.forEach((block, bi) => {
        block.questions.forEach((q, qi) => {
          fallback.push({ questionIndex: `${bi + 1}.${qi + 1}`, level: "medium" });
        });
      });
    }
    return res.status(500).json({ message: "L·ªói AI", perQuestion: fallback, raw: err.response?.data || err.message });
  }
});

export default router;