import express from 'express';
import fetch from 'node-fetch';
import { Groq } from 'groq-sdk';
import dotenv from 'dotenv';

dotenv.config();
const router = express.Router();
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// üü© Ch·∫•m Part 1 (c√≥ h√¨nh ·∫£nh)
async function scorePart1WithOpenRouter(imageUrl, keywords, userSentence) {
  const prompt = `
B·∫°n l√† gi√°o vi√™n ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† m·ªôt c√¢u h·ªçc vi√™n vi·∫øt d·ª±a v√†o ·∫£nh v√† t·ª´ kh√≥a.

·∫¢nh (URL): ${imageUrl}
T·ª´ kh√≥a: ${keywords.join(', ')}
C√¢u h·ªçc vi√™n: "${userSentence}"

H√£y nh·∫≠n x√©t c√¢u n√†y ƒë√∫ng/sai v√† gi·∫£i th√≠ch ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát.
  `.trim();

  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
    },
    body: JSON.stringify({
      model: "mistralai/mistral-7b-instruct",
      messages: [
        { role: "system", content: "B·∫°n l√† m·ªôt gi√°o vi√™n TOEIC." },
        { role: "user", content: prompt }
      ],
    }),
  });

  const data = await response.json();

  if (!data.choices || !data.choices[0]?.message?.content) {
    console.error("‚ùå OpenRouter kh√¥ng tr·∫£ v·ªÅ h·ª£p l·ªá:", data);
    return "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ OpenRouter.";
  }

  return data.choices[0].message.content;
}

// üü® Ch·∫•m Part 2
function buildPromptPart2(item) {
  return `
B·∫°n l√† gi√°m kh·∫£o TOEIC Writing Part 2.

üì© Email ƒë·ªÅ b√†i:
${item.prompt}

‚úçÔ∏è C√¢u tr·∫£ l·ªùi c·ªßa h·ªçc sinh:
${item.text}

üéØ Y√™u c·∫ßu:
1. ƒê√°nh gi√° b√†i vi·∫øt b·∫±ng ti·∫øng Vi·ªát v·ªÅ: c·∫•u tr√∫c email, m·ª©c ƒë·ªô ph√π h·ª£p, t·ª´ v·ª±ng v√† ng·ªØ ph√°p.
2. Sau ƒë√≥, **ƒë∆∞a ra 2-3 g·ª£i √Ω c·∫£i thi·ªán c√¢u tr·∫£ l·ªùi n√†y** (g·ª£i √Ω c·ª• th·ªÉ, d·ªÖ hi·ªÉu cho ng∆∞·ªùi h·ªçc).
`.trim();
}

// üü® Ch·∫•m Part 3
function buildPromptPart3(part3) {
  return `
B·∫°n l√† gi√°m kh·∫£o TOEIC Writing Part 3.

üìñ ƒê·ªÅ b√†i:
${part3.question}

‚úçÔ∏è B√†i vi·∫øt h·ªçc sinh:
${part3.text}

üéØ Y√™u c·∫ßu:
1. ƒê√°nh gi√° b√†i vi·∫øt b·∫±ng ti·∫øng Vi·ªát theo c√°c ti√™u ch√≠: t·ªï ch·ª©c √Ω, ph√°t tri·ªÉn n·ªôi dung, ch√≠nh x√°c ng·ªØ ph√°p.
2. Cho ƒëi·ªÉm t·ª´ 0 ƒë·∫øn 15.
3. **ƒê∆∞a ra g·ª£i √Ω c·∫£i thi·ªán b√†i vi·∫øt (√≠t nh·∫•t 2 ƒëi·ªÉm)** ƒë·ªÉ h·ªçc sinh vi·∫øt t·ªët h∆°n l·∫ßn sau.
`.trim();
}

async function scoreWithGroq(prompt) {
  const response = await groq.chat.completions.create({
    model: 'llama3-70b-8192',
    messages: [
      { role: 'system', content: 'B·∫°n l√† gi√°m kh·∫£o TOEIC Writing chuy√™n nghi·ªáp.' },
      { role: 'user', content: prompt }
    ],
    temperature: 0.5
  });

  return response.choices[0].message.content.trim();
}

// ‚úÖ API CH√çNH
router.post('/fullscore', async (req, res) => {
  try {
    const { part1 = [], part2 = [], part3 = {} } = req.body;

    // Ch·∫•m Part 1
    const part1Feedback = await Promise.all(
      part1.map(async (q) => {
        try {
          return await scorePart1WithOpenRouter(q.imageUrl, q.keywords, q.userSentence);
        } catch (err) {
          console.error("‚ùå L·ªói Part 1:", err.message);
          return "Kh√¥ng th·ªÉ ch·∫•m c√¢u n√†y.";
        }
      })
    );

    // Ch·∫•m Part 2 (Groq, t·ª´ng c√¢u)
    const part2Feedback = await Promise.all(
      part2.map((item) => scoreWithGroq(buildPromptPart2(item)))
    );

    // Ch·∫•m Part 3 (Groq, to√†n b√†i)
    const part3Feedback = part3.text ? await scoreWithGroq(buildPromptPart3(part3)) : '';

    res.json({
      part1Feedback,
      part2Feedback,
      part3Feedback
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ch·∫•m ƒëi·ªÉm:", err);
    res.status(500).json({ error: 'L·ªói khi ch·∫•m ƒëi·ªÉm.' });
  }
});

export default router;
