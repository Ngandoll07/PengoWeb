import express from 'express';
import dotenv from 'dotenv';
import axios from 'axios';

dotenv.config();
const router = express.Router();

const GROQ_API_KEY = process.env.GROQ_API_KEY;

// ƒê∆∞·ªùng d·∫´n ch·∫•m theo Part
router.post('/score-reading-part', async (req, res) => {
  const { part, questions, answers } = req.body;

  if (![5, 6, 7].includes(part)) {
    return res.status(400).json({ error: 'Ph·∫ßn ƒë·ªçc kh√¥ng h·ª£p l·ªá (ph·∫£i l√† 5, 6 ho·∫∑c 7)' });
  }

  const systemMessage = `
B·∫°n l√† tr·ª£ l√Ω luy·ªán thi TOEIC ph·∫ßn ƒê·ªçc hi·ªÉu.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
- X√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng cho t·ª´ng c√¢u h·ªèi (A, B, C ho·∫∑c D).
- So s√°nh v·ªõi ƒë√°p √°n ng∆∞·ªùi d√πng ƒë√£ ch·ªçn.
- Cho bi·∫øt ƒë√°p √°n ƒë√∫ng, sai, v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát **v√¨ sao ƒë√°p √°n ƒë√≥ l√† ch√≠nh x√°c** (ng·ªØ ph√°p, t·ª´ v·ª±ng, c·∫•u tr√∫c, ng·ªØ c·∫£nh v.v).

H√£y tr·∫£ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON sau:
{
  "correct": <s·ªë c√¢u ƒë√∫ng>,
  "total": <t·ªïng s·ªë c√¢u>,
  "skipped": <s·ªë c√¢u b·ªè tr·ªëng>,
  "feedback": [
    {
      "index": <s·ªë th·ª© t·ª± c√¢u h·ªèi>,
      "userAnswer": "B",
      "correctAnswer": "A",
      "correct": false,
      "comment": "Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát t·∫°i sao ƒë√°p √°n A ƒë√∫ng, v√† v√¨ sao B sai."
    }
  ]
}
`;

  const prompt = `
D∆∞·ªõi ƒë√¢y l√† c√°c c√¢u h·ªèi TOEIC Part ${part}:

${questions.map((q, i) => `
C√¢u ${i + 1}:
${q.question}
A. ${q.options[0]}
B. ${q.options[1]}
C. ${q.options[2]}
D. ${q.options[3]}
Ng∆∞·ªùi h·ªçc ch·ªçn: ${answers[i] || 'Kh√¥ng ch·ªçn'}
`).join('\n')}
`;

  try {
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama3-8b-8192',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: prompt }
        ],
        temperature: 0.4
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const aiText = response.data.choices[0].message.content;
    console.log("üß† AI tr·∫£ v·ªÅ:", aiText);

    // T√¨m ƒëo·∫°n JSON trong response
    let jsonOnly = aiText.trim();
    if (!jsonOnly.startsWith('{')) {
      const first = jsonOnly.indexOf('{');
      const last = jsonOnly.lastIndexOf('}');
      jsonOnly = jsonOnly.slice(first, last + 1);
    }

    const aiResult = JSON.parse(jsonOnly);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ an to√†n
    return res.json({
      correct: aiResult.correct || 0,
      total: aiResult.total || questions.length,
      skipped: aiResult.skipped || 0,
      feedback: aiResult.feedback || []
    });

  } catch (err) {
    console.error("‚ùå L·ªói AI ch·∫•m ƒëi·ªÉm:", err.response?.data || err.message);
    return res.status(500).json({
      error: 'AI tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói m·∫°ng',
      raw: err.response?.data || err.message
    });
  }
});

// Endpoint ch·∫•m to√†n b√†i (n·∫øu c·∫ßn)
router.post('/', async (req, res) => {
  const { questions, answers } = req.body;

  if (!questions || !answers) {
    return res.status(400).json({ error: 'Thi·∫øu d·ªØ li·ªáu.' });
  }

  const tokenEstimate = questions.length * 100 + answers.length * 10;
  if (tokenEstimate > 5000) {
    return res.status(400).json({
      error: 'Qu√° nhi·ªÅu c√¢u h·ªèi. H√£y g·ª≠i t·ª´ng Part ƒë·ªÉ tr√°nh v∆∞·ª£t gi·ªõi h·∫°n token.'
    });
  }

  const prompt = `
T√¥i c√≥ b√†i ƒë·ªçc TOEIC g·ªìm c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám A, B, C, D. B·∫°n h√£y:
- T·ª± x√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng.
- So s√°nh v·ªõi ƒë√°p √°n ng∆∞·ªùi d√πng ch·ªçn.
- Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát v√¨ sao ƒë√°p √°n ƒë√∫ng.

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON:
[
  {
    "index": 1,
    "userAnswer": "B",
    "correctAnswer": "A",
    "correct": false,
    "comment": "Gi·∫£i th√≠ch ti·∫øng Vi·ªát..."
  },
  ...
]

D·ªØ li·ªáu nh∆∞ sau:
${questions.map((q, i) => `
C√¢u ${i + 1}: ${q.question}
A. ${q.options[0]} | B. ${q.options[1]} | C. ${q.options[2]} | D. ${q.options[3]}
Ng∆∞·ªùi d√πng ch·ªçn: ${answers[i] || "Kh√¥ng ch·ªçn"}
`).join('\n')}
`;

  try {
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama3-8b-8192',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.4
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const content = response.data.choices[0].message.content;

    const first = content.indexOf('[');
    const last = content.lastIndexOf(']');
    const json = content.slice(first, last + 1);

    res.json(JSON.parse(json));
  } catch (err) {
    console.error('‚ùå L·ªói AI ch·∫•m to√†n b√†i:', err.response?.data || err.message);
    res.status(500).json({ error: 'L·ªói t·ª´ GROQ AI' });
  }
});

export default router;
